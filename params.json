{
  "name": "Uni.Orm",
  "tagline": "A simple, fast and lightweight data access tool for .Net",
  "body": "`Uni.Orm` is the continuation of `Uni` project. Project name is just changed.\r\n\r\n`Uni.Orm` is a simple, fast and lightweight micro ORM. It has been developed as a compact single class library enabling to do the job with minimal effort just by using a few basic methods.\r\n\r\n##Performance\r\n![orm_comp](https://cloud.githubusercontent.com/assets/1851856/11440560/3e3438d6-950c-11e5-8a67-fa479f75a839.jpg)\r\n\r\n##How To Install It?\r\nDrop `UniOrm.cs` and `UniExtensions.cs` C#.NET code files into your project and change it as you wish or install from `NuGet Galery`.\r\n\r\nIf you want to install from `Nuget`, you should write Package Manager Console below code and `Uni.ORM` will be installed automatically as shown below.\r\n```\r\nInstall-Package Uni.ORM\r\n```\r\n![uniormpkmanager](https://cloud.githubusercontent.com/assets/1851856/10602062/d7680ef8-771e-11e5-8f88-2945bc3f74ea.PNG)\r\n\r\nBy the way, you can also reach `Uni.ORM` `NuGet` package from https://www.nuget.org/packages/Uni.ORM/ address as shown below.\r\n\r\n![uniormnuget](https://cloud.githubusercontent.com/assets/1851856/10601767/88efab66-771c-11e5-9981-291a23ff43e6.PNG)\r\n\r\n##How Do You Use It?\r\nSuppose you installed database connectors in your machine.\r\nYour project does not need any DLL in references. `Uni.ORM` will find DLL which is necessary from the GAC.\r\n\r\n###First Step\r\nLet's have a look at web.config or app.config file for ConnectionStrings which will be used by `Uni.ORM`.\r\n```xml\r\n<?xml version=\"1.0\" encoding=\"utf-8\" ?>\r\n<configuration>\r\n  <connectionStrings>\r\n    <add name=\"AdventureWorks\" connectionString=\"Data Source=localhost;Initial Catalog=AdventureWorks2012;Integrated Security=True\" providerName=\"System.Data.SqlClient\"/>\r\n    \r\n    <add name=\"HR\" connectionString=\"DATA SOURCE=localhost;PASSWORD=1;PERSIST SECURITY INFO=True;USER ID=HR\" providerName=\"Oracle.DataAccess.Client\"/>\r\n    \r\n    <add name=\"Sakila\" connectionString=\"server=localhost;Uid=root;Pwd=1;database=sakila;Allow User Variables=true;\" providerName=\"MySql.Data.MySqlClient\"/>\r\n    \r\n    <add name=\"NorthwindSqlite\" connectionString=\"Data Source=.\\Northwind.sqlite;Version=3;\" providerName=\"System.Data.Sqlite\"/>\r\n    \r\n    <add name=\"NorthwindPostgre\" connectionString=\"HOST=localhost;PORT=5432;DATABASE=Northwind;USER ID=postgres;PASSWORD=123456;\" providerName=\"NpgSql\"/>\r\n  </connectionStrings>\r\n</configuration>\r\n```\r\n`Uni.ORM` has the ability to understand the database you want to use with providerName attribute in connectionString. So, don't forget the providerName.\r\nSuppose we want to use Oracle database. The providerName must be set as \"Oracle.DataAccess.Client\" as shown in the below config code.\r\n\r\n###Second Step\r\nCreate UniOrm object now.\r\n```csharp\r\nvar aw = new UniOrm(\"AdventureWorks\");//Microsoft SQL Server\r\n\r\nvar hr = new UniOrm(\"HR\");//Oracle\r\n\r\nvar sakila = new UniOrm(\"Sakila\");//MySQL\r\n\r\nvar northwindPostgre = new UniOrm(\"NorthwindPostgre\");//PostgreSQL\r\n\r\nvar northwindSqlite = new UniOrm(\"NorthwindSqlite\");//SQLite\r\n```\r\n\r\nCreate UniOrm object with connectionString directly in case you don't want to use config file.\r\n```csharp\r\nvar aw = new UniOrm(@\"Data Source=localhost;Initial Catalog=AdventureWorks2012;Integrated Security=True\", DatabaseType.SQLServer);//Microsoft SQL Server\r\n\r\nvar hr = new UniOrm(@\"DATA SOURCE=localhost;PASSWORD=1;PERSIST SECURITY INFO=True;USER ID=HR\", DatabaseType.Oracle);//Oracle\r\n\r\nvar sakila = new UniOrm(@\"server=localhost;Uid=root;Pwd=1;database=sakila;Allow User Variables=true;\", DatabaseType.MySQL);//MySQL\r\n```\r\n\r\nSuppose you want to use SQLite database. Add SQLite DLL files in your project references as you don't have DLLs in your GAC. \r\n\r\n```csharp\r\nvar northwindSqlite = new UniOrm(@\"Data Source=.\\Northwind.sqlite;Version=3;\", DatabaseType.SQLite, System.Data.SQLite.SQLiteFactory.Instance);//SQLite\r\n```\r\n\r\n##How To Execute a Query?\r\nSuppose we want to Query \"Product\" table. All you need is to instantiate it inline.\r\n```csharp\r\n//returns all the products\r\nvar result = aw.dyno.Query(Schema: \"Production\", Table: \"Product\");\r\n```\r\nActually, after you write \"aw.dyno\" and click the point button, you will not see intellisense. Because, methods and arguments after \"aw.dyno\" code are on the fly. But, `Uni.ORM` is smart and dynamic. So, it will generate and execute query according to your method and parameters.\r\n\r\n```csharp\r\n//if you want to use dynamic advantages, you should use dynamic. \r\n//But, if you use like that, you will lose intellisense.\r\ndynamic aw = new UniOrm(\"AdventureWorks\");\r\n\r\nvar result = aw.Query(Schema: \"Production\", Table: \"Product\");\r\n\r\n//if you use as bellow, you just use dyno property without extra code\r\nvar aw = new UniOrm(\"AdventureWorks\");\r\n\r\nvar result = aw.dyno.Query(Schema: \"Production\", Table: \"Product\");\r\n\r\n//you can use intellisense here\r\nvar result = aw.Count(commandType: System.Data.CommandType.TableDirect, schema: \"Production\", commandText: \"Product\");\r\n```\r\n\r\nYou can also run classic queries.\r\n```csharp\r\nIEnumerable<dynamic> result = aw.dyno.Query(Sql: \"SELECT * FROM [Production].[Product]\");\r\n\r\nIEnumerable<dynamic> result = aw.dyno.Query(Sql: \"SELECT * FROM Production.Product WHERE ListPrice=@0 and Name=@1\", Args: new object[] { 0, \"Adjustable Race\" });\r\n\r\nIEnumerable<dynamic> result = aw.dyno.Query(Sql: \"SELECT * FROM Production.Product WHERE ListPrice=@ListPrice and Name=@Name\", Args: new { ListPrice = 0, Name = \"Adjustable Race\" });\r\n\r\nIEnumerable<dynamic> result = aw.dyno.Query(Sql: \"SELECT * FROM Production.Product WHERE ListPrice=@ListPrice and Name=@Name\", ListPrice: 0, Name: \"Adjustable Race\");\r\n\r\n//Generated Sql: SELECT * FROM Production.Product WHERE ListPrice=@ListPrice AND Name=@Name\r\nIEnumerable<dynamic> result = aw.dyno.Query(Sql: \"SELECT * FROM Production.Product\", ListPrice: 0, Name: \"Adjustable Race\");\r\n```\r\n\r\n##Dynamic object and strongly typed result\r\nSuppose you want to use `POCO` model, you can set your `POCO` type as generic in method. So, `Uni.ORM` will return strongly typed result.\r\n\r\n```csharp\r\npublic class customer\r\n{\r\n    public int customer_id { get; set; }\r\n    public int store_id { get; set; }\r\n    public string first_name { get; set; }\r\n    public string last_name { get; set; }\r\n    public string email { get; set; }\r\n    public int address_id { get; set; }\r\n    public bool active { get; set; }\r\n    public DateTime create_date { get; set; }\r\n    public DateTime last_update { get; set; }\r\n}\r\n\r\n//Execute and return strongly typed result\r\nIEnumerable<customer> result = sakila.dyno.Query<customer>(Table: \"customer\");\r\n\r\n//Execute and return dynamic object result\r\nIEnumerable<dynamic> result = sakila.dyno.Query(Table: \"customer\");\r\n```\r\n\r\n##Generating POCO Model\r\nBelow is an easy way how to generate POCO Model.\r\n\r\n```csharp\r\n//This code will return dynamic mapped result.\r\nvar result1 = oracle.dyno.Query(Table: \"PRODUCTS\", Limit: 1);\r\n\r\nvar anonymousObj = new UniAnonymousObject();\r\n\r\nvar productType = anonymousObj.GetDynamicType(result1, \"PRODUCTS\");\r\n\r\nstring productPoco = anonymousObj.GetPoco(result1, \"PRODUCTS\");\r\n```\r\n\r\nGenerated POCO class\r\n\r\n```csharp\r\npublic class PRODUCTS\r\n{\r\n    public decimal PRODUCTID { get; set; }\r\n    public string PRODUCTNAME { get; set; }\r\n    public decimal SUPPLIERID { get; set; }\r\n    public decimal CATEGORYID { get; set; }\r\n    public string QUANTITYPERUNIT { get; set; }\r\n    public decimal UNITPRICE { get; set; }\r\n    public decimal UNITSINSTOCK { get; set; }\r\n    public decimal UNITSONORDER { get; set; }\r\n    public decimal REORDERLEVEL { get; set; }\r\n    public decimal DISCONTINUED { get; set; }\r\n}\r\n```\r\n\r\nLet's use generated POCO type.\r\n```csharp\r\nIEnumerable<PRODUCTS> result2 = oracle.dyno.Query<PRODUCTS>(Table: \"PRODUCTS\");\r\n```\r\n\r\n##IN Statement\r\nYou can use In statement with `Uni.ORM` simply as below;\r\n```csharp\r\n//This query is created by Uni.ORM\r\n//SELECT ProductID,Name,ProductNumber FROM [Production].[Product] WHERE Color in (@Color0,@Color1,@Color2) and Size in (@Size0,@Size1,@Size2)\r\nvar result = aw.dyno.Query(Schema: \"Production\", Table: \"Product\", Columns: \"ProductID,Name,ProductNumber\", Where: \"Color in @Color and Size in @Size\", Args: new { Color = new[] { \"Black\", \"Yellow\", \"Red\" }, Size = new[] { \"38\", \"40\", \"42\" } });\r\n```\r\n\r\n##LIMIT AND ORDERBY\r\nLet's say we need first row of our data. We need to set \"Limit\" argument as 1 (Limit:1) and \"OrderBy\" argument as \"ASC\"\r\n```csharp\r\nvar result = aw.dyno.Query(Schema: \"Production\", Table: \"Product\", Columns: \"ProductID,Name,ProductNumber\", Where: \"ListPrice=@ListPrice and Color in @Color\", OrderBy: \"ProductID\", Limit: 1, ListPrice: 0, Color: new[] { \"Red\", \"Black\" });\r\n```\r\nWe can also take last row in same way. Just change \"OrderBy\" from \"ASC\" to \"DESC\" like below\r\n```csharp\r\nvar result = aw.dyno.Query(Schema: \"Production\", Table: \"Product\", Columns: \"ProductID,Name,ProductNumber\", Where: \"ListPrice=@ListPrice and Color in @Color\", OrderBy: \"ProductID DESC\", Limit: 1, ListPrice: 0, Color: new[] { \"Red\", \"Black\" });\r\n```\r\n\r\n##PAGING\r\nLet's say you need paging in your application. Just use query method with extra arguments which are \"PageSize\" and \"PageNo\" as below;\r\n```csharp\r\n//First page 10 record\r\nvar sakilaResult4 = sakila.dyno.Query(Table: \"customer\", OrderBy: \"address_id\", PageSize: 10, PageNo: 1);\r\n//Secodn page 10 record\r\nvar sakilaResult5 = sakila.dyno.Query(Table: \"customer\", OrderBy: \"address_id\", PageSize: 10, PageNo: 2);\r\n```\r\n\r\nUse RowNumberColumn for Microsoft SQL Server\r\n```csharp\r\n//Generated Sql: SELECT TOP 50 * FROM (SELECT ROW_NUMBER() OVER (ORDER BY BusinessEntityID) AS RowNumber, * FROM (SELECT * FROM [Person].[Person]) as PagedTable) as PagedRecords WHERE RowNumber > 0\r\nvar result1 = adventureWorks.dyno.Query(Schema: \"Person\", Table: \"Person\", RowNumberColumn: \"BusinessEntityID\", PageSize: 50, PageNo: 1);\r\n\r\n//Generated Sql: SELECT TOP 50 * FROM (SELECT ROW_NUMBER() OVER (ORDER BY BusinessEntityID) AS RowNumber, * FROM (SELECT * FROM [Person].[Person]) as PagedTable) as PagedRecords WHERE RowNumber > 50\r\nvar result2 = adventureWorks.dyno.Query(Schema: \"Person\", Table: \"Person\", RowNumberColumn: \"BusinessEntityID\", PageSize: 50, PageNo: 2);\r\n```\r\n\r\nSQLite\r\n```csharp\r\n//Generated Sql: SELECT * FROM Products LIMIT 0,50\r\nIEnumerable<dynamic> result1 = northwindSqlite.dyno.Query(Table: \"Products\", PageSize: 50, PageNo: 1);\r\n\r\n//Generated Sql: SELECT * FROM Products LIMIT 50,50\r\nIEnumerable<dynamic> result2 = northwindSqlite.dyno.Query(Table: \"Products\", PageSize: 50, PageNo: 2);\r\n```\r\n\r\n##Aggregate operations\r\nYou can also use aggregates. Actually, logic is the same. Just change Method name and `Uni.ORM` will do this job.\r\nDo not forget to set \"Columns\" argument for \"Sum\", \"Max\", \"Min\", \"Avg\" aggregates.\r\n```csharp\r\n//Exists and In Usage\r\nvar result = aw.dyno.Exists(Schema: \"Production\", Table: \"Product\", Where: \"Color in @Color\", Color: new[] { \"Black\", \"Yellow\" });\r\n\r\n//Count and In Usage\r\nvar result = aw.dyno.Count(Schema: \"Production\", Table: \"Product\", Where: \"Color in @Color\", Color: new[] { \"Black\", \"Yellow\" });\r\n\r\n//Sum and In Usage\r\nvar result = aw.dyno.Sum(Schema: \"Production\", Table: \"Product\", Columns: \"ListPrice\", Where: \"Color in @Color\", Color: new[] { \"Black\", \"Yellow\" });\r\n\r\n//Max and In Usage\r\nvar result = aw.dyno.Max(Schema: \"Production\", Table: \"Product\", Columns: \"ListPrice\", Where: \"Color in @Color\", Color: new[] { \"Black\", \"Yellow\" });\r\n\r\n//Min and In Usage\r\nvar result = aw.dyno.Min(Schema: \"Production\", Table: \"Product\", Columns: \"ListPrice\", Where: \"Color in @Color\", Color: new[] { \"Black\", \"Yellow\" });\r\n\r\n//Avg and In Usage\r\nvar result = aw.dyno.Avg(Schema: \"Production\", Table: \"Product\", Columns: \"ListPrice\", Where: \"Color in @Color\", Color: new[] { \"Black\", \"Yellow\" });\r\n```\r\n\r\n##Some Cast Operations\r\nUni.Orm has some direct cast operations which are `GetBool`, `GetInt`, `GetLong`, `GetDecimal`, `GetDouble`, `GetFloat`, `GetDateTime`, `GetValue`\r\n\r\n```csharp\r\ndecimal result1 = adventureWorks.dyno.GetDecimal(Sql: \"SELECT AVG(ListPrice) ListPrice FROM Production.Product\");\r\n\r\nOR\r\n\r\ndecimal result2 = adventureWorks.dyno.Query<decimal>(Sql: \"SELECT AVG(ListPrice) ListPrice FROM Production.Product WHERE Name=@Name\", Limit: 1, Name: \"Sport-100 Helmet, Red\");\r\n\r\nbool result3 = adventureWorks.dyno.GetBool(Sql: \"SELECT CASE WHEN EXISTS(SELECT * FROM Production.Product) THEN 1 ELSE 0 END as RESULT\", Limit: 1);\r\n\r\n```\r\n\r\n##Stored Procedure and Function\r\nLet's say you want to execute your stored procedure or function. Just use \"SP\" or \"FN\" arguments.\r\nIf your stored procedure or function returns back as an output parameter, you should also use \"Listener\" argument so that after method is executed, you can retrieve output parameters and sql statement which is generated by `Uni.ORM`\r\n\r\nIf you need some complex stored procedure usage, `Uni.ORM` presents Listener. You can listen some events which are `OnCallback` and `OnParameterCreating`. There will be other events in the future.\r\n\r\n`OnCallback` occurs when the result is generated.\r\n\r\n`OnParameterCreating` occurs before the parameter is created. So, you can change parameter direction, dataType etc.\r\n\r\n```csharp\r\n//Simple usage of Stored procedure\r\nvar result = aw.dyno.Query(Schema: \"Person\", Sp: \"GetPersonList\");\r\n\r\n//Stored Procedure and CallBack(You can take output parameter of SP)\r\n\r\ndynamic args = new ExpandoObject();\r\nargs.RETURN_VALUE = (int)0;\r\nargs.ErrorLogID = (int)0;\r\n\r\nvar listener = new Listener\r\n{\r\n    OnCallback = (Callback f) =>\r\n    {\r\n        //Callback returns back some variables.(Sql statement and Stored procedure output parameters)\r\n        Console.WriteLine(f.SqlQuery);\r\n\r\n        args.RETURN_VALUE = f.OutputParameters.RETURN_VALUE;\r\n    },\r\n    OnParameterCreating = (DbParameter f) =>\r\n    {\r\n        if (f.ParameterName == \"ErrorLogID\")\r\n            f.Direction = ParameterDirection.Output;\r\n        else if (f.ParameterName == \"RETURN_VALUE\")\r\n            f.Direction = ParameterDirection.ReturnValue;\r\n    }\r\n};\r\n\r\nadventureWorks.dyno.NonQuery(Sp: \"uspLogError\", Options: new Options { EventListener = listener }, Args: args);\r\n```\r\n\r\n```csharp\r\n//Simple usage of Function\r\nvar result = crm.dyno.Query(Schema: \"User\", FN: \"fn_GetUserByUserID\", Args: new object[] { 64, 1 });\r\n```\r\n##Insert, Update, Delete, BulkInsert and BulkUpdate Operations\r\n`Uni.ORM` will generate Insert SQL query according to your object.\r\n\r\n```csharp\r\n//Insert one record\r\nvar newID = sakila.dyno.Insert(\r\n    Table: \"customer\",\r\n    PKField: \"customer_id\",\r\n    Args: new { first_name = \"kenan\", last_name = \"hancer\", email = \"kenanhancer@hotmail.com\", active = true, store_id = 1, address_id = 5, create_date = DateTime.Now }\r\n);\r\n\r\n`Uni.ORM` will generate Delete SQL query according to parameters.\r\n//Delete record which is inserted\r\nvar result = sakila.dyno.Delete(Table: \"customer\", PKField: \"customer_id\", Args: newID);\r\n\r\n\r\n/////////////////////////////////////////////////////////////////////////////////////////////////////\r\n//Insert more than one record (BulkInsert)\r\nvar insertResult = sakila.dyno.Insert(\r\n    Table: \"customer\",\r\n    PKField: \"customer_id\",\r\n    Args: new object[] { \r\n                new { first_name = \"kenan\", last_name = \"hancer\", email = \"kenanhancer@hotmail.com\", active = true, store_id = 1, address_id = 5, create_date=DateTime.Now },\r\n                new { first_name = \"sinan\", last_name = \"hancer\", email = \"kenanhancer@hotmail.com\", active = true, store_id = 1, address_id = 5, create_date=DateTime.Now },\r\n                new { first_name = \"kemal\", last_name = \"hancer\", email = \"kenanhancer@hotmail.com\", active = true, store_id = 1, address_id = 5, create_date=DateTime.Now }\r\n            }\r\n);\r\n\r\n//Delete more than one record\r\nvar deleteResult = sakila.dyno.Delete(Table: \"customer\", PKField: \"customer_id\", Args: insertResult);\r\n/////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n//Update one record\r\nvar updateResult = sakila.dyno.Update(\r\n    Table: \"customer\",\r\n    Columns: \"active\",\r\n    Args: new { customer_id = 1, active = false }\r\n);\r\n\r\n//Update more than one record\r\nvar updateResult = sakila.dyno.Update(\r\n    Table: \"customer\",\r\n    Columns: \"active\",\r\n    Args: new object[] {\r\n                new { customer_id = 2, active = false },\r\n                new { customer_id = 3, active = false }\r\n            }\r\n);\r\n\r\n\r\n//BulkInsert\r\n//Below code retriews first 5 rows and updates and then insert again database.\r\nIEnumerable<dynamic> result = sakila.dyno.Query(Table: \"customer\", Limit: 5, OrderBy: \"customer_id\"));\r\nresult = result.ToList();\r\nresult.ForEach(f => f.active = false);\r\n\r\nvar bulkInsertResult = sakila.dyno.Insert(\r\n    Table: \"customer\",\r\n    PKField: \"customer_id\",\r\n    Args: result\r\n);\r\n\r\n//BulkUpdate\r\nIEnumerable<dynamic> result = sakila.dyno.Query(Table: \"customer\", Limit: 5, OrderBy: \"customer_id DESC\");\r\nresult = result.ToList();\r\nresult.ForEach(f => f.active = true);\r\n\r\nvar bulkUpdateResult = sakila.dyno.Update(\r\n    Table: \"customer\",\r\n    Columns: \"active\",\r\n    Where: \"address_id=@address_id AND store_id=@store_id\",\r\n    Args: result\r\n);\r\n\r\nvar deleteResult = sakila.dyno.Delete(\r\n    Table: \"customer\",\r\n    PKField: \"customer_id\",\r\n    Args: result\r\n);\r\n```\r\n\r\n##Listeners(Events)\r\n`Uni.ORM` supports some special events as `OnCallback`, `OnCommandPreExecuting`, `OnConvertingResult`, `OnParameterCreating`, `OnPreGeneratingSql`\r\n\r\nLet’s say you want to convert Delete result from int to bool. Just use `OnConvertingResult` event. After executing query `OnCallback`, it wıll give you some details such as SqlQuery that is genetated by `Uni.Orm`\r\n\r\n```csharp\r\nvar options = new Options\r\n{\r\n    EventListener = new Listener\r\n    {\r\n        OnConvertingResult = (sqlEntity, result) =>\r\n        {\r\n            if (sqlEntity.Binder == \"delete\")\r\n                return result.To<bool>();\r\n\r\n            return result;\r\n        }\r\n    }\r\n};\r\n\r\nbool result1 = oracle.dyno.Delete(Table: \"PRODUCTS\",\r\n                                  PKField: \"PRODUCTID\",\r\n                                  Options: options,\r\n                                  Args: 79);\r\n```\r\n\r\nYou can also set OnConvertingResult and OnCallback parameters directly.\r\n```csharp\r\nFunc<SqlEntity, object, object> onConvertingResult = (sqlEntity, result) => result.To<bool>();\r\n\r\nAction<Callback> onCallback = callback => Console.WriteLine(\"SqlQuery is {0}\", callback.SqlQuery);\r\n\r\nbool result5 = oracle.dyno.Delete(Table: \"PRODUCTS\",\r\n                                  PKField: \"PRODUCTID\",\r\n                                  OnConvertingResult: onConvertingResult,\r\n                                  OnCallback: onCallback,\r\n                                  Args: new object[] { 88, 89 });\r\n```\r\n\r\n\r\n##Transaction\r\n`Uni.ORM` supports transaction based operations. You just need to set Options parameter as below.\r\n\r\n```csharp\r\nvar options = new Options { Transaction = oracle.NewConnection().BeginTransaction() };\r\n\r\nvar result1 = oracle.dyno.Insert(Table: \"PRODUCTS\",\r\n                                PKField: \"PRODUCTID\",\r\n                                Sequence: \"SC_PRODUCT\",\r\n                                Options: options,\r\n                                Args: new\r\n                                {\r\n                                    PRODUCTID = 0,\r\n                                    PRODUCTNAME = \"Test Product 1\",\r\n                                    SUPPLIERID = 12,\r\n                                    CATEGORYID = 2,\r\n                                    QUANTITYPERUNIT = \"12 boxes\",\r\n                                    UNITPRICE = 10,\r\n                                    UNITSINSTOCK = 50,\r\n                                    DISCONTINUED = 0\r\n                                });\r\n\r\nvar result2 = oracle.dyno.Insert(Table: \"PRODUCTS\",\r\n                                PKField: \"PRODUCTID\",\r\n                                Sequence: \"SC_PRODUCT\",\r\n                                Options: options,\r\n                                Args: new\r\n                                {\r\n                                    PRODUCTID = 0,\r\n                                    PRODUCTNAME = \"Test Product 2\",\r\n                                    SUPPLIERID = 12,\r\n                                    CATEGORYID = 2,\r\n                                    QUANTITYPERUNIT = \"12 boxes\",\r\n                                    UNITPRICE = 10,\r\n                                    UNITSINSTOCK = 50,\r\n                                    DISCONTINUED = 0\r\n                                });\r\n\r\nvar result3 = oracle.dyno.Insert(Table: \"PRODUCTS\",\r\n                                PKField: \"PRODUCTID\",\r\n                                Sequence: \"SC_PRODUCT\",\r\n                                Options: options,\r\n                                Args: new\r\n                                {\r\n                                    PRODUCTID = 0,\r\n                                    PRODUCTNAME = \"Test Product 3\",\r\n                                    SUPPLIERID = 12,\r\n                                    CATEGORYID = 2,\r\n                                    QUANTITYPERUNIT = \"12 boxes\",\r\n                                    UNITPRICE = 10,\r\n                                    UNITSINSTOCK = 50,\r\n                                    DISCONTINUED = 0\r\n                                });\r\n\r\noptions.Transaction.Commit();\r\n```\r\n\r\nYou can also set Trasaction parameter directly.\r\n\r\n```csharp\r\nDbTransaction transaction = oracle.NewConnection().BeginTransaction();\r\n\r\nvar result1 = oracle.dyno.Insert(Table: \"PRODUCTS\",\r\n                                PKField: \"PRODUCTID\",\r\n                                Sequence: \"SC_PRODUCT\",\r\n                                Transaction: transaction,\r\n                                Args: new\r\n                                {\r\n                                    PRODUCTID = 0,\r\n                                    PRODUCTNAME = \"Test Product 1\",\r\n                                    SUPPLIERID = 12,\r\n                                    CATEGORYID = 2,\r\n                                    QUANTITYPERUNIT = \"12 boxes\",\r\n                                    UNITPRICE = 10,\r\n                                    UNITSINSTOCK = 50,\r\n                                    DISCONTINUED = 0\r\n                                });\r\n\r\nvar result2 = oracle.dyno.Insert(Table: \"PRODUCTS\",\r\n                                PKField: \"PRODUCTID\",\r\n                                Sequence: \"SC_PRODUCT\",\r\n                                Transaction: transaction,\r\n                                Args: new\r\n                                {\r\n                                    PRODUCTID = 0,\r\n                                    PRODUCTNAME = \"Test Product 2\",\r\n                                    SUPPLIERID = 12,\r\n                                    CATEGORYID = 2,\r\n                                    QUANTITYPERUNIT = \"12 boxes\",\r\n                                    UNITPRICE = 10,\r\n                                    UNITSINSTOCK = 50,\r\n                                    DISCONTINUED = 0\r\n                                });\r\n\r\nvar result3 = oracle.dyno.Insert(Table: \"PRODUCTS\",\r\n                                PKField: \"PRODUCTID\",\r\n                                Sequence: \"SC_PRODUCT\",\r\n                                Transaction: transaction,\r\n                                Args: new\r\n                                {\r\n                                    PRODUCTID = 0,\r\n                                    PRODUCTNAME = \"Test Product 3\",\r\n                                    SUPPLIERID = 12,\r\n                                    CATEGORYID = 2,\r\n                                    QUANTITYPERUNIT = \"12 boxes\",\r\n                                    UNITPRICE = 10,\r\n                                    UNITSINSTOCK = 50,\r\n                                    DISCONTINUED = 0\r\n                                });\r\n\r\ntransaction.Commit();\r\n```\r\n\r\n##Config Based Query\r\nLet’s say you need to make a query. But, this `Uni.Orm` query parameters also should be set as a json data. So, you can make query dynamicly. :)\r\n\r\n```csharp\r\n\r\nstring json = @\"{\r\n  'Operation': 'Query',\r\n  'Table': 'Products',\r\n  'Where': 'ProductName in @ProductName',\r\n  'ProductName': [\r\n    'Chai',\r\n    'Chang',\r\n    'Aniseed Syrup',\r\n    'Mishi Kobe Niku',\r\n    'Ikura'\r\n  ]\r\n}\";\r\n\r\ndynamic criteria = Newtonsoft.Json.JsonConvert.DeserializeObject<ExpandoObject>(json);\r\n\r\nvar options = new Options();\r\noptions.EventListener = new Listener\r\n{\r\n    OnCallback = (Callback f) =>\r\n    {\r\n        Console.WriteLine(f.SqlQuery);\r\n    },\r\n    OnParameterCreating = (DbParameter f) =>\r\n    {\r\n    \r\n    }\r\n};\r\ncriteria.Options = options;\r\n\r\nIEnumerable<dynamic> result = northwindSqlite.dyno.Execute(criteria);\r\n\r\nresult = result.ToList();\r\n```\r\n\r\n##Simple Join, GroupBy and Having\r\nLet’s say you want to use simple join queries. Actually, you can use the capabilities of `Uni.ORM`. \r\nFirst of all, we must ask ourselves what join is. It is the equality of specific table columns. \r\nSo, we can set “Table” argument for tables we want to join so later we can set “Where” argument for columns which are equal as the following codes. \r\nIf we use aggregate functions such as “SUM, MAX, MIN, AVG, COUNT” and normal column together such as “sum(amount), first_name” we should set “GroupBy” argument such as “GroupBy: first_name”. \r\nThat is all, this is just an idea and ,it can be developed in different variations.\r\n\r\n```csharp\r\n//Three tables are joined. customer and payment tables are joined with customer_id column. Later, payment and staff tables are joined with staff_id column\r\nvar result = sakila.dyno.Query(\r\n        Table: \"payment as p,customer as c,staff as s\", \r\n        Columns: \"p.*, CONCAT(s.first_name, ' ', s.last_name) as Staff_FullName, CONCAT(c.first_name, ' ', c.last_name) as Customer_FullName\", \r\n        Where: \"p.customer_id=c.customer_id and s.staff_id=p.staff_id and p.customer_id=?customer_id\", \r\n        customer_id: 1);\r\n\r\n//Get Total payment amounts which are bigger than 100 and payment counts according to customers\r\nvar result = sakila.dyno.Query(\r\n        Table: \"payment p,customer c\", \r\n        Columns: \"CONCAT(c.first_name, ' ', c.last_name) as Customer_FullName,SUM(p.amount) TotalPayment,COUNT(p.customer_id) PaymentCount\",\r\n        Where: \"p.customer_id=c.customer_id\",\r\n        GroupBy: \"Customer_FullName\",\r\n        Having: \"SUM(p.amount)>100\");\r\n```\r\n\r\n##Some example codes\r\n```csharp\r\n//Actually, you can use Uni.ORM in several ways. below four lines of code will return same result.\r\nvar result = aw.dyno.Query(Schema: \"Production\", Table: \"Product\", Where: \"Name=@0\", Args: \"Adjustable Race\");\r\n\r\nvar result = aw.dyno.Query(Schema: \"Production\", Table: \"Product\", Where: \"Name=@0\", Args: new object[] { \"Adjustable Race\" });\r\n\r\nvar result = aw.dyno.Query(Schema: \"Production\", Table: \"Product\", Where: \"Name=@Name\", Args: new { Name = \"Adjustable Race\" });\r\n\r\nvar result = aw.dyno.Query(Schema: \"Production\", Table: \"Product\", Where: \"Name=@Name\", Name: \"Adjustable Race\");\r\n\r\nvar result = aw.dyno.Query(Schema: \"Production\", Table: \"Product\", Name: \"Adjustable Race\");\r\n\r\n\r\n//below three lines of code will return same result.\r\nvar result = aw.dyno.Query(Schema: \"Production\", Table: \"Product\", Where: \"Color=@1 and ListPrice=@0\", Args: new object[] { 0, \"Black\" });\r\n\r\nvar result = aw.dyno.Query(Schema: \"Production\", Table: \"Product\", Where: \"Color=@Color and ListPrice=@ListPrice\", Args: new { ListPrice = 0, Color = \"Black\" });\r\n\r\nvar result = aw.dyno.Query(Schema: \"Production\", Table: \"Product\", Where: \"Color=@Color and ListPrice=@ListPrice\", ListPrice: 0, Color: \"Black\");\r\n\r\nvar result = aw.dyno.Query(Schema: \"Production\", Table: \"Product\", ListPrice: 0, Color: \"Black\");\r\n\r\n//After this method runs, generated query will be below line. So, Uni.ORM have some standart arguments. But, others will be criteria.\r\n//Let's look at below SQL query \"Color\" and \"ListPrice\" arguments added as criteria.\r\n//SELECT ProductID,Name,ProductNumber FROM [Production].[Product] WHERE ListPrice=@ListPrice AND Color=@Color ORDER BY ProductID DESC\r\nvar result = aw.dyno.Query(Schema: \"Production\", Table: \"Product\", Columns: \"ProductID,Name,ProductNumber\", OrderBy: \"ProductID DESC\", ListPrice: 0, Color: \"Black\");\r\n\r\n//Named Argument Query Syntax\r\nvar result = sakila.dyno.Query(Table: \"customer\", Active: true);\r\nvar result = sakila.dyno.Query(Table: \"customer\", Where: \"Active=?Active\", Active: true);\r\n\r\n//Get total payment amount of customer who has value 1 of customer_id\r\nvar result = sakila.dyno.Sum(Table: \"payment\", Columns: \"amount\", customer_id: 1);\r\n\r\n//Get FullName of customers\r\nvar result = sakila.dyno.Query<string>(Table: \"customer\", Columns: \"CONCAT(first_name, ' ', last_name) as FullName\");\r\n\r\n//Get tables of database\r\nvar tables = sakila.GetTables();\r\n\r\n//Get columns of table\r\nvar tableColumns = sakila.GetColumns(\"customer\");\r\n\r\n//Below 5 rows generate same result\r\nvar result = aw.dyno.Query(Schema: \"Production\", Table: \"Product\", Columns: \"ProductID,Name,ProductNumber\", Where: \"Color in @Color and Size in @Size\", Args: new { Color = new[] { \"Black\", \"Yellow\", \"Red\" }, Size = new[] { \"38\", \"40\", \"42\" } });\r\n\r\nvar result = aw.dyno.Query(Schema: \"Production\", Table: \"Product\", Columns: \"ProductID,Name,ProductNumber\", Where: \"Color in @Color\", Args: new { Color = new[] { \"Black\", \"Yellow\", \"Red\" }, Size = new[] { \"38\", \"40\", \"42\" } });\r\n\r\nvar result = aw.dyno.Query(Schema: \"Production\", Table: \"Product\", Columns: \"ProductID,Name,ProductNumber\", Args: new { Color = new[] { \"Black\", \"Yellow\", \"Red\" }, Size = new[] { \"38\", \"40\", \"42\" } });\r\n\r\nvar result = aw.dyno.Query(Schema: \"Production\", Table: \"Product\", Columns: \"ProductID,Name,ProductNumber\", Where: \"Color in @Color and Size in @Size\", Color = new[] { \"Black\", \"Yellow\", \"Red\" }, Args: new { Size = new[] { \"38\", \"40\", \"42\" } });\r\n\r\nvar result = aw.dyno.Query(Schema: \"Production\", Table: \"Product\", Columns: \"ProductID,Name,ProductNumber\", Where: \"Size in @Size\", Color = new[] { \"Black\", \"Yellow\", \"Red\" }, Args: new { Size = new[] { \"38\", \"40\", \"42\" } });\r\n\r\nvar result1 = northwindSqlite.dyno.Count(Table: \"Products\", Columns: \"ProductName\");\r\n\r\nvar result2 = northwindSqlite.dyno.Count(Table: \"Products\", Columns: \"*\");\r\n\r\nvar result3 = northwindSqlite.dyno.Count(Table: \"Products\", Columns: \"*\", Where: \"ProductID=@0\", Args: 1);\r\n\r\nvar result4 = northwindSqlite.dyno.Exists(Table: \"Products\", Where: \"ProductID IN (@0,@1)\", Args: new object[] { 1, 2 });\r\n\r\nvar result5 = northwindSqlite.dyno.Sum(Table: \"Products\", Columns: \"UnitPrice\");\r\n\r\nvar result6 = northwindSqlite.dyno.Max(Table: \"Products\", Columns: \"UnitPrice\");\r\n\r\nvar result7 = northwindSqlite.dyno.Min(Table: \"Products\", Columns: \"UnitPrice\");\r\n\r\nvar result8 = northwindSqlite.dyno.Avg(Table: \"Products\", Columns: \"UnitPrice\");\r\n\r\nvar result9 = northwindSqlite.dyno.Query(Table: \"Customers\", Columns: \"CompanyName\", Where: \"Region IS NULL\");\r\n\r\nvar result10 = northwindSqlite.dyno.Query(Table: \"Customers\", Columns: \"CompanyName\", Where: \"Region IS NULL\", City: \"London\");\r\n\r\nvar result11 = northwindSqlite.dyno.Sum(Table: \"Products\", Columns: \"UnitPrice\", CategoryID: 1);\r\n\r\nvar result12 = northwindSqlite.dyno.Sum(Table: \"Products\", Columns: \"UnitPrice\", Where: \"CategoryID IN @CategoryID\", CategoryID: new object[] { 1, 2 });\r\n\r\nIEnumerable<dynamic> result13 = northwindSqlite.dyno.Query(Table: \"Products\", Columns: \"UnitPrice\", Where: \"CategoryID IN @CategoryID\", CategoryID: new object[] { 1, 2 });\r\n\r\nresult13 = result13.ToList();\r\n\r\nIEnumerable<dynamic> result14 = northwindSqlite.dyno.Query(Table: \"Customers\", Columns: \"CompanyName\", Where: \"Region IS NULL\", City: \"London\");\r\n\r\nresult14 = result14.ToList();\r\n\r\nIEnumerable<Products> result15 = northwindSqlite.dyno.Query<Products>(Sql: \"SELECT * FROM Products\");\r\n\r\nresult15 = result15.ToList();\r\n\r\nvar result16 = northwindSqlite.dyno.Sum(Table: \"Products\", Columns: \"UnitPrice\", CategoryID: new object[] { 1, 2 });\r\n\r\nIEnumerable<dynamic> result17 = northwindSqlite.dyno.Query(Table: \"Products\", CategoryID: new object[] { 1, 2, 3, 4, 5, 6, 7 });\r\n\r\nresult17 = result17.ToList();\r\n\r\nIEnumerable<Products> result18 = northwindSqlite.dyno.Query<Products>(Table: \"Products\", CategoryID: new object[] { 1, 2, 3, 4, 5, 6, 7 });\r\n\r\nresult18 = result18.ToList();\r\n\r\nProducts result19 = northwindSqlite.dyno.Query<Products>(Sql: \"SELECT * FROM Products\", Limit: 1);\r\n```\r\n",
  "google": "",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}